require "uri"
require "net/http"

class MeetsController < ApplicationController
  before_action :set_meet, only: %i[show update create_directions]
  before_action :set_business, only: %i[update]

  def index
    @meets = Meet.all
  end

  def show
    @start = "#{@meet.start_point_lat}, #{@meet.start_point_long}"
    @meetup = "#{@meet.midpoint_lat}, #{@meet.midpoint_long}"
    if @meet.directions.nil?
      @route = get_meet_navigation_steps(@start, @meet.business.street_address)
      @meet.directions = create_directions(@route)
      @meet.duration = @route.duration.text
      @meet.modes = get_icons(@route)
      @meet.save
    end
    @directions_to_share = @meet.directions
    @name = "Directions to #{@meet.business.name}"
    @whatsapp_steps = "test"
  end

  def new
    Business.update_all(current_search: false)
    @meet = Meet.new
  end

  def create
    @meet = Meet.new(meet_params)
    @meet.user = current_user
    if @meet.save
      midpoint = indentify_midpoint(
        "#{@meet.start_point_lat}, #{@meet.start_point_long}",
        "#{@meet.friend_lat}, #{@meet.friend_long}"
      )
      @meet.midpoint_lat = midpoint.first
      @meet.midpoint_long = midpoint.last
      @meet.save
      @businesses = find_business_nearby(
        @meet.midpoint_lat,
        @meet.midpoint_long
      )
      save_business_results(@businesses)
      sleep(1)

      redirect_to meet_businesses_path(@meet)
    else
      render :new, status: :unprocessable_entity
      # as a pop up rather than simple form info
    end
  end

  def update
    @meet.business = @business
    @meet.name.gsub!(/(?<=▬).*(?=▬)/, " #{@business.name} ").gsub!(/[0-9]+\s/, '')
    @meet.save
    # REFACTOR
    redirect_to meet_path(@meet)
  end

  private

  def set_meet
    @meet = Meet.find(params[:id])
  end

  def set_business
    @business = Business.find(meet_params[:business_id])
  end

  def meet_params
    # most of these will be generated by a hidden form
    params.require(:meet).permit(
      :name, :start_point_long, :start_point_lat,
      :friend_long, :friend_lat, :business_id
    )
  end

  def find_business_nearby(mid_lat, mid_long)
    coords = [mid_lat, mid_long].join("%2C")
    url = URI("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=#{coords}&radius=#{Meet::RADIUS}&type=#{Business::TYPES.join('|')}&key=#{ENV.fetch('GOOGLE_MAPS_API')}")
    https = Net::HTTP.new(url.host, url.port)
    https.use_ssl = true
    request = Net::HTTP::Get.new(url)
    response = https.request(request)
    response.read_body
    JSON.parse(response.read_body)["results"]
  end

  def indentify_midpoint(user_location, friend_location)
    # Generate route
    route_steps = Google::Maps.route(user_location, friend_location).steps
    # How many steps?
    midpoint = route_steps[route_steps.size / 2]
    [
      midpoint["end_location"]["lat"],
      midpoint["end_location"]["lng"]
    ]
  end

  def save_business_results(results)
    results.each do |bus|
      if Business.find_by(place_id: bus["place_id"]).nil?
        @photos = bus["photos"][0]["photo_reference"] unless bus["photos"].nil?
        @rating = bus["rating"].nil? ? 0 : bus["rating"]
        Business.create(
          name: bus["name"],
          description: "#{bus['name']} is a #{Faker::Adjective.positive} #{bus['types'][0]} in #{bus['vicinity'].gsub(/[^,]*$/).first.strip}",
          category: bus["types"][0],
          street_address: bus["vicinity"],
          image_url: @photos,
          # CONSIDER ONLY SHOWING HIGHLY RATED
          rating: @rating,
          latitude: bus["geometry"]["location"]["lat"],
          longitude: bus["geometry"]["location"]["lng"],
          place_id: bus["place_id"]
        )
      else
        Business.update(place_id: bus["place_id"], current_search: true)
      end
    end
  end

  def get_meet_navigation_steps(user_location, meetpoint)
    Google::Maps.route(user_location, meetpoint)
  end

  def create_directions(route)
    # consider using .in_groups_of(2).to_h to show icons on each step
    directions = []
    route.steps.each do |step|
      # directions << step.travel_mode # to be used for icons
      if step.travel_mode == "TRANSIT"
        stops = step.transit_details.num_stops
        directions << "Take the #{step.transit_details.line.short_name} to #{step.transit_details.arrival_stop.name} (#{stops} #{"stop".pluralize(stops)})"
      else
        directions << step.html_instructions
      end
    end
    directions
  end

  def get_icons(route)
    modes = []
    route.steps.each do |step|
      # mode =
      modes << step.transit_details.line.vehicle.name unless step.transit_details.nil?
    end
    modes
  end
end
