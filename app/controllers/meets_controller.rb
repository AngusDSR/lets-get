require "uri"
require "net/http"

class MeetsController < ApplicationController
  before_action :set_meet, only: %i[show]

  # needs a joining table between businesses and meets?
  # one meet could include a 10 nearby business but so could another

  def index
    # this page will be a simple list - maybe with a photo
    # should only be current user's
    # low priority

    # current_user.meets
    @meets = Meet.all
  end

  def show
  end

  def new
    @meet = Meet.new
  end

  def create
    @meet = Meet.new(meet_params)
    @meet.user = current_user
    if @meet.save
      midpoint = indentify_midpoint(
        "#{@meet.start_point_lat}, #{@meet.start_point_long}",
        "#{@meet.friend_lat}, #{@meet.friend_long}"
      )
      @meet.midpoint_lat = midpoint.first
      @meet.midpoint_long = midpoint.last
      @meet.save
      @businesses = find_business_nearby(
        @meet.midpoint_lat,
        @meet.midpoint_long
      )
      raise
      @businesses.each do |bus|
        Business.create(
          name: bus["name"],
          description: "faker",
          category: bus["types"][0],
          street_address: bus["vicinity"],
          image_url: bus["photos"][0]["photo_reference"],
          latitude: bus["geometry"]["location"]["lat"],
          longitude: bus["geometry"]["location"]["long"]
        )
      end
      raise


    # when we save, we seed all the results in the businesses model
    # need to added directiosn later
    # new column for friend directions needed


    # 2. search nearby call
    # 3. add search nearby results to businesses model
    # 4. redirect to businesses index (buttons)
      # success
    else
      render :new, status: :unprocessable_entity
      # as a pop up rather than simple form info
    end
  end

  private

  def set_meet
    @meet = Meet.find(params[:id])
  end

  def meet_params
    # most of these will be generated by a hidden form
    params.require(:meet).permit(
      :name, :start_point_long, :start_point_lat,
      :friend_long, :friend_lat
    )
  end

  def find_business_nearby(mid_lat, mid_long)
    # this should be changeable by the user somewhere
    radius = 250
    types = "bakery|bar|book_store|cafe|park|casino|gym|spa|restaurant|museum|night_club|movie_theater|bowling_alley|amusement_park|art_gallery|bakery"
    coords = [mid_lat, mid_long].join("%2C")
    url = URI("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=#{coords}&radius=#{radius}&type=#{types}&key=#{ENV.fetch('GOOGLE_MAPS_API')}")
    https = Net::HTTP.new(url.host, url.port)
    https.use_ssl = true
    request = Net::HTTP::Get.new(url)
    response = https.request(request)
    response.read_body
    JSON.parse(response.read_body)["results"]
  end

  def indentify_midpoint(user_location, friend_location)
    # Generate route
    route_steps = Google::Maps.route(user_location, friend_location).steps
    # How many steps?
    midpoint = route_steps[route_steps.size / 2]
    [
      midpoint["end_location"]["lat"],
      midpoint["end_location"]["lng"]
    ]
  end

  def save_business_results(results)
    #
    # Business.nen()
    # run Business.create(relevant key and value parirs) <- name = refernce to json, so on
    # [business_result = {
      # CHECK WHAT THESE ARE
    #   name: 'costa',
    #    desc: 'ESOSDFM'
    #   category: 'coffee shop',
    #   lat_point: '55.1',
    #   long_point: '0.15'
    # }]
      # put this in a loop, over the array of results
    # Business.create(
    #   name: business_result["name"],
    #   description: business_result["description"],
    #   category: business_result["category"],
    #   lat_point: business_result["lat_point"],
    #   long_point: business_result["long_point"],
    # )
# validate save and reirect business>index
# pre-select the meet on the index

# on click > add to current meet with update

  end
end
