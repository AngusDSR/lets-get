require "uri"
require "net/http"

class MeetsController < ApplicationController
  before_action :set_meet, only: %i[show]

  # needs a joining table between businesses and meets?
  # one meet could include a 10 nearby business but so could another


  def index
    # this page will be a simple list - maybe with a photo
    # should only be current user's
    # low priority

    # current_user.meets
    @meets = Meet.all
  end

  def show; end

  def new
    @meet = Meet.new
    # name will be generated with standard format - "Friday:Hoxton-Farringdon" or similar
    # User "start_point_long" and lat come from hidden form
    # "friend_long" + lat come from hidden form
    # "midpoint_long" + lat come from find_business_nearby
    # "directions" generated by find_business_nearby
    # "radius" = 250 by default
    # "active" = true
    @places = find_business_nearby


  end

  def create
    @meet = Meet.new(meet_params)
    @meet.user = current_user
    if @meet.save
      find_business_nearby
    else
      render :new, status: :unprocessable_entity
    end
  end

  private

  def set_meet
    @meet = Meet.find(params[:id])
  end

  def meet_params
    # most of these will be generated by a hidden form
    params.require(:meet).permit(
      :name,
      :start_point_long, :start_point_lat,
      :friend_long, :friend_lat,
      :midpoint_long, :midpoint_lat,
      :directions, :radius, :active
    )
  end

  def find_business_nearby
    category = ["park", "cafe", "bar", "restaurant"].sample
    radius = "250"
    coords = [-33.8670522, 151.1957362].join("%2C")
    url = URI("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=#{coords}&radius=#{radius}&type=#{category}&key=#{ENV.fetch('GOOGLE_MAPS_API')}")
    https = Net::HTTP.new(url.host, url.port)
    https.use_ssl = true
    request = Net::HTTP::Get.new(url)
    response = https.request(request)
    response.read_body
    JSON.parse(response.read_body)["results"]
  end

  def indentify_midpoint
    # Hardcoded for testing
    user_location = "123 Kingsland Road"
    friend_location = "Bond Street Station"
    # Generate route
    route_steps = Google::Maps.route(user_location, friend_location).steps
    # How many steps?
    route_steps[route_steps.size / 2]
  end
end
